=pod

=head1 NAME

pacana - an Arch Linux pacman repository analyzer

=head1 SYNOPSIS

B< pacana> [B<-A>,B<--analyze>] [I<OPTIONS>]
 B<pacana> {B<-h>,B<--help>} [I<OPTIONS>]
 B<pacana> {B<-V>,B<--version>}
 B<pacana> {B<-C>,B<--copying>}

=head1 DESCRIPTION

B<pacana> is a C<C> language program that can be used to assist working
with custom Arch Linux repositories and AUR packages that may shadow or
need to track existing official repository packages.

=head1 ARGUMENTS

The program accepts the following arguments:

=head1 OPTIONS

The options that are detailed below are recognized by B<pacana>.
B<pacana> uses L<getopt_long_only(3)>, so unambiguous abbreviations
of long options and long options with a single dash are also supported.

=head2 COMMAND OPTIONS

The default is to run the analysis tool.  When any of the following
options are specified, the command mode changes.

Only one command option can be specified.

=over

=item [B<-A>, B<--analyze>]

Analyze pacman local and sync repositories.

=item B<-h>, B<--help>

Prints usage information to standard output and exits.

=item B<-V>, B<--version>

Prints detailed version information and exits.

=item B<-C>, B<--copying>

Prints detailed copying permissions and exits.

=back

=head2 GENERAL OPTIONS

The following are general options:

=over

=item B<-v>, B<--verbose> [I<LEVEL>]

Print diagnostic information to standard error during operation.  This
option can be repeated to increase the verbosity of output.  The default
level is 1.

=item B<-D>, B<--debug> [I<LEVEL>]

Prints debugging information to standard error during operation.  This
option can be repeated to increase the debugging level.  The default
level is 0.

=back

=head2 ANALYSIS OPTIONS

The following are analysis options.  These options affect the analysis
performed when the B<--analyze> command is specified.

=over

=item B<-a>, B<--aur> [I<URL>]

Specifies that analysis is to be performed on AUR packages as well.
Optionally specifies the base I<URL> at which to query the AUR using the
version 5 RPC API.  The default is to not examine the AUR.  The default
I<URL>, when not specified, is F<https://aur.archlinux.org/rpc/>.

=item B<-w>, B<--which> I<WHICH>[B<,>[B<!>]I<WHICH>]...

Specifies which analyses to perform in a comma separated list.
Prefixing an exclamation mark to the analyses specifies that analysis is
not to be performed.  The following analyses can be specified:

=over

=item C<all>

Perform all available analyses.  This is the default.

=item C<shadow>

Check whether packages in a local or sync database of higher priority
masks a package of the same name in a lower priority database.  Also
checks whether the masking package is of an older version than the
package that it masks.

=item C<provides>

Check whether packages in a local or sync database of higher priority
provide (and conflict with) a package contained in a lower priority
database, and whether the package is of an older version than the
package that it masks.

=item C<vcscheck>

Checks whether development packages in a sync database provide (and
conflict with) a package contained in a lower priority database, which
is of older version than the package that it masks.

=item C<outdated>

TODO

=item C<alternate>

Check whether packages in a local or sync database provide a name
(virtual or real package name) that is also provided by a package in
another (or the same) database.  It also checks whether the version
provided by an alternate is out of date with respect to the version
provided by another alternate.

=item C<stranded>

Checks whether packages that exist in the local database and do not
exist in a sync database, or packages that exist in a custom sync
database, exist in the AUR and are of an older version than that
contained in the AUR.

When no corresponding package exists in the AUR, and the package is from
the local database, they are marked as C<foreign>.  When they exist in a
custom database, they are marked as C<stranded>.

Note that these checks are only performed when access to the AUR has be
activated.

=item C<aurcheck>

Checks whether packages provided by custom sync databases are present
in the AUR and whether they are up to date with the AUR.

Note that these checks are only performed when access to the AUR has be
activated.

=item C<missing>

Checks whether packages in a local or sync database depend on a package
not provided by any sync database.  When access to the AUR has been
activated as well, checks whether the AUR provides the missing
dependency.

=back

=item B<-r>, B<--repos> I<REPO>[B<,>[B<!>]I<REPO>]...

Specifies which repositories to analyzed in a comma separated list.
Prefixing an exclamation mark to the repository specifies that analysis
is not to be performed.

The default is to analyze all repositories.  Also, the default for sync
repositories known to pacman that are not listed is to analyze the
repository.  Therefore, a list of repositories containing only
exclamation mark prefixed entries will specify repositories to exclude
from the list.

=item B<-c>, B<--custom> I<CUSTOM>[B<,>[B<!>]I<CUSTOM>]...

Specifies which repositories are to be considered custom repositories in
a comma separated list.  Prefixing an exclamation mark to the repository
specifies that it is to be considered a standard sync repository.
Custom sync repositories are those that may contain binary packages that
correspond to built AUR packages.

The default is to consider sync repositories that match the name of an
official Arch Linux sync repository to be considered non-custom.  Sync
repositories that do not match a name of an official Arch Linux sync
repository are considered custom.

=back

=head1 BEHAVIOUR

B<pacana> exhibits the following behaviour:

=head2 ANALYSES

The following analyses may be performed:

=over

=item C<shadow>

Check whether packages in a local or sync database of higher priority
masks a package of the same name in a lower priority database.  Also
checks whether the masking package is of an older version than the
package that it masks.

This is useful for detecting custom repository packages that have the
same name as an official Arch Linux repository package.  Note that these
packages cannot originate on the AUR (Arch Linux User Repository)
because AUR packages are forbidden from having the same name as an
official repository package; therefore, the AUR is never checked for
these packages.

For example, if I rebuild the F<bind> package to not require C<python>,
but instead make it optional, and then place it in a custom repository
of highest priority, it will mask the F<bind> package from the official
repository.  I will want to know when the official repository F<bind>
package is newer than mine so that I may recompile it without the
C<python> requirement.

This check identifies each time that a package from a higher priority
local or sync database masks a package of a lower database, and warns
when the version from masked database differs from the masking database.
This information is generated whether or not the packages in question
are installed on the querying system.

=item C<provides>

Check whether packages in a local or sync database of higher priority
provide (and conflict with) a package contained in a lower priority
database, and whether the package is of an older version than the
package that it masks.

This is helpful for detecting AUR-built packages in a custom repository
that provide an official repository package that has become out of date
with the package that it provides.

For example, the AUR package F<seamonkey-gtk2> with version I<2.49.4-4>
provides the same version of the F<seamonkey> package, but with a GTK+
interface.  The F<seamonkey-gtk2> package is in a custom repository (or
is a C<foreign> package) and the F<seamonkey> package is in B<community>.
When F<seamonkey> hits version I<2.49.5-1> while F<seamonkey-gtk2> is
still at version I<2.49.4-4>, it indicates that the F<seamonkey-gtk2>
package needs to be updated.

When the AUR is activated, packages identified in this fashion are also
checked against the AUR to determine whether they are out of date with
respect to the AUR.

=item C<vcscheck>

Checks whether development packages in a sync database provide (and
conflict with) a package contained in a lower priority database, which
is of older version than the package that it masks.

VCS packages are determined by detecting a B<->I<VCS> suffix on the
package name as well as a C<makedepends> that requires the VCS package
at build time.  If the package then provides and conflicts with another
package without the VCS suffix, then a VCS development package has been
detected.  If the version of the VCS package is less recent than the
non-VCS package, a warning is issued that the VCS package needs
updating (regardless of whether the package is installed).  If the VCS
package is installed on the current system, a warning is issued that a
VCS package is installed.

When the AUR is activated, packages identified in this fashion are also
checked against the AUR to determine whether they are out of date with
respect to the AUR.

=item C<outdated>

TODO

=item C<alternate>

Check whether packages in a local or sync database provide a name
(virtual or real package name) that is also provided by a package in
another (or the same) database.  If the provided name also has a
version, checks whether each of the alternate packages are at the same
version.

This is useful for detecting groups of packages which are alternates to
each other, whether inclusive or exclusive depends on whether the
packages also conflict with each other.  It also detects whether one of
the alternates is out of date when compared to the other alternates.

When the AUR is activated, packages identified as alternates that come
from a custom database are also checked against the AUR to determine
whether any of the alternate packages are out of date with respect to
the AUR.

=item C<stranded>

Checks whether packages that exist in the local database and do not
exist in a sync database, or packages that exist in a custom sync
database, exist in the AUR.  When they do not exist in the AUR, and the
package is from the local database, they are marked as C<foreign>; a
custom database, marked as C<stranded>.  When the package is from the
local database, but not found in any custom sync database, and exists in
the AUR, they are marked as C<divorced>.

This can help identify official Arch Linux sync repository packages that
have been removed from the official repositories and have not been added
(yet) to the AUR in the case of C<foreign> packages, or that have been
added to the AUR in the case of C<divorced> packages.

It can also help to identify custom sync repository packages that
correspond to a package that has been removed from the AUR in the case
of C<stranded> packages.

It used to be that Arch Linux maintainers always moved packages that
were removed from official repositories to the AUR and C<foreign>
packages very seldom occurred.  This practice seems to have recently
been dropped and C<foreign> packages often occur.

These checks are only performed by default when the AUR is activated.

The action needed for a C<foreign> package is to add the package to
the AUR, compile the package and add it to the custom repository.

The action needed for a C<divorced> package is to compile download the
package from the AUR, compile the package and add it to the custom
repository.

The action needed for a C<stranded> package is to place the source for
the AUR package under VCS control somewhere else than the AUR.
B<pacana> cannot detect that this action has been performed and will
always mark such packages as C<stranded>.

=item C<aurcheck>

Checks whether packages that are listed in a sync database considered a
C<custom> database are present in the AUR and whether they are out of
date with respect to the AUR.

This check is only performed by default when the AUR is activated.

=back

=head1 ENVIRONMENT

The following environment variables are examined by B<pacana>:

=over

=item B<HOME>

Used by B<pacana> to determine the user's home directory.

=back

=head1 FILES

B<pacana> uses the following files:


=head1 BUGS

B<pacana> has way too many options.  Please report other bugs to the
source code repository at L<https://github.com/bbidulock/pacana/issues>.

=head1 SEE ALSO

L<pacman(8)>

=head1 AUTHOR

Brian Bidulock L<mailto:bidulock@openss7.org>

=cut

# vim: set sw=4 tw=72 nocin spell spelllang=en_ca:


